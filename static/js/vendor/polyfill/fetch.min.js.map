{"version":3,"sources":["jsdelivr-header.js","/npm/fetch-polyfill@0.8.2/fetch.js"],"names":[],"mappings":"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","file":"/npm/fetch-polyfill@0.8.2/fetch.js","sourceRoot":"","sourcesContent":["/**\n * Minified by jsDelivr using UglifyJS v3.3.21.\n * Original file: /npm/fetch-polyfill@0.8.2/fetch.js\n * \n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","(function() {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = name.toString();\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = value.toString();\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    var self = this\n    if (headers instanceof Headers) {\n      headers.forEach(function(name, values) {\n        values.forEach(function(value) {\n          self.append(name, value)\n        })\n      })\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        self.append(name, headers[name])\n      })\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  // Instead of iterable for now.\n  Headers.prototype.forEach = function(callback) {\n    var self = this\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      callback(name, self.map[name])\n    })\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return fetch.Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new fetch.Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob();\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return fetch.Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return fetch.Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return fetch.Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : fetch.Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(function (text) {\n          return JSON.parse(text);\n      });\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(url, options) {\n    options = options || {}\n    this.url = url\n\n    this.credentials = options.credentials || 'omit'\n    this.headers = new Headers(options.headers)\n    this.method = normalizeMethod(options.method || 'GET')\n    this.mode = options.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && options.body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(options.body)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = xhr.getAllResponseHeaders().trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  var noXhrPatch =\n    typeof window !== 'undefined' && !!window.ActiveXObject &&\n      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n  function getXhr() {\n    // from backbone.js 1.1.2\n    // https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L1181\n    if (noXhrPatch && !(/^(get|post|head|put|delete|options)$/i.test(this.method))) {\n      this.usingActiveXhr = true;\n      return new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    return new XMLHttpRequest();\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this._initBody(bodyInit)\n    this.type = 'default'\n    this.url = null\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n  }\n\n  Body.call(Response.prototype)\n\n  self.Headers = Headers;\n  self.Request = Request;\n  self.Response = Response;\n\n  self.fetch = function(input, init) {\n    // TODO: Request constructor should accept input, init\n    var request\n    if (Request.prototype.isPrototypeOf(input) && !init) {\n      request = input\n    } else {\n      request = new Request(input, init)\n    }\n\n    return new fetch.Promise(function(resolve, reject) {\n      var xhr = getXhr();\n      if (request.credentials === 'cors') {\n        xhr.withCredentials = true;\n      }\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return;\n      }\n\n      function onload() {\n        if (xhr.readyState !== 4) {\n          return\n        }\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options))\n      }\n      xhr.onreadystatechange = onload;\n      if (!self.usingActiveXhr) {\n        xhr.onload = onload;\n        xhr.onerror = function() {\n          reject(new TypeError('Network request failed'))\n        }\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(name, values) {\n        values.forEach(function(value) {\n          xhr.setRequestHeader(name, value)\n        })\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  fetch.Promise = self.Promise; // you could change it to your favorite alternative\n  self.fetch.polyfill = true\n})();\n"]}